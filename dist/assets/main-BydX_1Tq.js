(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))o(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const s of n.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&o(s)}).observe(document,{childList:!0,subtree:!0});function t(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function o(i){if(i.ep)return;i.ep=!0;const n=t(i);fetch(i.href,n)}})();class f{constructor(){this.authorsIndex=null,this.authorData=new Map,this.authors=new Map,this.songTypes=new Set}async loadAuthorsIndex(){try{const e=`?cb=${new Date().getTime()}`,t=await fetch(`/authors-index.json${e}`);if(!t.ok)throw new Error(`Failed to load authors index: ${t.statusText}`);const o=await t.json();return this.authorsIndex=o,o}catch(e){throw console.error("Error loading authors index:",e),e}}async loadAuthorData(e){if(this.authorData.has(e))return this.authorData.get(e);this.authorsIndex||await this.loadAuthorsIndex();const t=this.authorsIndex.authors.find(o=>o.id===e);if(!t)throw new Error(`Author ${e} not found in index`);try{const o=`?cb=${new Date().getTime()}`,i=await fetch(`/authors/${t.file}${o}`);if(!i.ok)throw new Error(`Failed to load data for author ${e}: ${i.statusText}`);const n=await i.json();return this.authorData.set(e,n),this.processAuthorData(e,n),n}catch(o){throw console.error(`Error loading data for author ${e}:`,o),o}}async loadData(){await this.loadAuthorsIndex();const e=[];for(const t of this.authorsIndex.authors)try{const o=await this.loadAuthorData(t.id);e.push(...o.songs)}catch(o){console.warn(`Failed to load data for author ${t.id}:`,o)}return{songs:e}}processAuthorData(e,t){t&&(t.songs.forEach(o=>{this.songTypes.add(o.type),this.authors.has(o.author)||this.authors.set(o.author,{id:o.author.toLowerCase().replace(/\s+/g,"-"),name:o.author,albums:[]})}),this.groupSongsByStructure(t))}groupSongsByStructure(e){if(!e)return;const t=new Map;e.songs.forEach(o=>{t.has(o.author)||t.set(o.author,new Map);const i=t.get(o.author);i.has(o.album)||i.set(o.album,new Map);const n=i.get(o.album);n.has(o.track)||n.set(o.track,[]),n.get(o.track).push(o)}),t.forEach((o,i)=>{let n=this.authors.get(i);n||(n={id:i.toLowerCase().replace(/\s+/g,"-"),name:i,albums:[]},this.authors.set(i,n));const s=[];o.forEach((r,l)=>{const c=[];r.forEach((u,a)=>{c.push({id:a.toLowerCase().replace(/\s+/g,"-"),name:a,songs:u})}),s.push({id:l.toLowerCase().replace(/\s+/g,"-"),name:l,tracks:c})}),n.albums=s})}getAvailableAuthors(){var e;return((e=this.authorsIndex)==null?void 0:e.authors)||[]}getAuthors(){return Array.from(this.authors.values())}getAuthorById(e){return Array.from(this.authors.values()).find(t=>t.id===e)}async getSongsByAuthor(e){var i;const t=(i=this.authorsIndex)==null?void 0:i.authors.find(n=>n.name===e);return t?(await this.loadAuthorData(t.id)).songs.filter(n=>n.author===e):[]}getSongTypes(){return Array.from(this.songTypes).sort()}async getSongsByType(e){const t=[];for(const[o,i]of this.authorData.entries())t.push(...i.songs.filter(n=>n.type===e));return t}getSupportedLanguages(){return["english","español"]}formatLyrics(e){return e.map((t,o)=>{let i=t;return i.startsWith("^")?(i=i.substring(1),i=i.replace(/\|$/,""),i=`<b>${i}</b><br>`):(i=i.replace(/\*(.*?)\*/g,"<b>$1</b>"),i=i.replace(/\|/g,"<br>")),i}).join("")}getLanguageKey(e){switch(e){case"english":return"english";case"español":return"español";default:return"português"}}}function b(d,e){try{if(e==="português")return Array.isArray(d.lyrics.português)&&d.lyrics.português.length>0;{const t=e;return Array.isArray(d.lyrics.translations[t])&&d.lyrics.translations[t].length>0}}catch(t){return console.error(`Validation failed for song ${d.title.português} in language ${e}:`,t),!1}}class v{constructor(e){this.lyricsService=e}renderLyrics(e,t){if(!e||e.length===0){const c=this.lyricsService.getAvailableAuthors().map(u=>`<option value="${u.name}">${u.name}</option>`).join("");t.innerHTML=`
        <div class="sticky-header" data-track="Default">
          <div class="song-selector">
            <select id="songSelect-default">
              <option value="" disabled selected>Choose an Author...</option>
              ${c}
            </select>
          </div>
        </div>
        <h2 id="lyrics-track-heading" class="track-heading">Select an Author</h2>
        <p>No lyrics available.</p>
      `;return}const o=this.groupSongsByTrack(e);let i="";const s=this.lyricsService.getAvailableAuthors().map(l=>`<option value="${l.name}">${l.name}</option>`).join("");i+=`
      <div class="sticky-header">
        <div class="song-selector">
          <select id="songSelect-main">
            <option value="" disabled selected>Choose an Author...</option>
            ${s}
          </select>
        </div>
      </div>
      <h2 id="lyrics-track-heading" class="track-heading">Track 1</h2>
    `,Object.keys(o).sort().forEach((l,c)=>{const u=l.replace(/\s+/g,"-");i+=`
        <div class="track-nest" data-track="${l}" id="lyrics-nest-${u}">
          <!-- Track ${c+1} Content -->
        </div>
      `,o[l].forEach((a,p)=>{const h=`lyrics-song-${p}-${u}`;i+=`
          <div class="song-section" id="${h}">
            <i class="song-type">${a.type}</i><br><br>
            <b>${a.title.português}</b><br><br>
            ${this.lyricsService.formatLyrics(a.lyrics.português)}
          </div>
          <hr>
        `})}),t.innerHTML=i}renderTranslations(e,t,o){if(!e||e.length===0){this.lyricsService.getAvailableAuthors().map(c=>`<option value="${c.name}">${c.name}</option>`).join(""),o.innerHTML=`
        <div class="sticky-header" data-track="Default">
          <div class="language-selector">
            <select id="languageSelect-default" disabled>
              <option value="" disabled selected>Choose language...</option>
              <option value="en">English</option>
              <option value="es">Spanish</option>
            </select>
          </div>
        </div>
        <h2 id="trans-track-heading" class="track-heading">Select a Language</h2>
        <p>No translations available.</p>
      `;return}const i=this.groupSongsByTrack(e);let n="";this.lyricsService.getAvailableAuthors().map(l=>`<option value="${l.name}">${l.name}</option>`).join(""),n+=`
      <div class="sticky-header">
        <div class="language-selector">
          <select id="languageSelect-main">
            <option value="" disabled selected>Choose language...</option>
            <option value="en">English</option>
            <option value="es">Spanish</option>
          </select>
        </div>
      </div>
      <h2 id="trans-track-heading" class="track-heading">Track 1</h2>
    `,Object.keys(i).sort().forEach((l,c)=>{const u=l.replace(/\s+/g,"-");n+=`
        <div class="track-nest" data-track="${l}" id="trans-nest-${u}">
          <!-- Track ${c+1} Content -->
        </div>
      `,i[l].forEach((a,p)=>{const h=`trans-song-${p}-${u}`;if(!b(a,t)){n+=`
            <div class="translation-section" id="${h}">
              <i class="song-type">${a.type}</i><br>
              <b>${a.title.português}</b><br>
              <p class="error">Translation not available for ${t}</p>
            </div>
            <hr>
          `;return}let g,y;try{if(t==="português")g=a.lyrics.português,y=a.title.português;else{const m=t;g=a.lyrics.translations[m],y=a.title[t]}}catch(m){console.error(`Error processing song ${a.title.português} for language ${t}:`,m),g=["Translation not available"],y=a.title.português}n+=`
          <div class="translation-section" id="${h}">
            <i class="song-type">${a.type}</i><br><br>
            <b>${y}</b><br><br>
            ${this.lyricsService.formatLyrics(g)}
          </div>
          <hr>
        `})}),o.innerHTML=n}groupSongsByTrack(e){const t={};return e.forEach(o=>{t[o.track]||(t[o.track]=[]),t[o.track].push(o)}),t}clearDisplay(e,t){e.innerHTML="",t.innerHTML=""}}class w{constructor(e,t){this.lyricsService=e,this.renderer=t,this.state={selectedAuthor:null,selectedLanguage:"english",isLoading:!1,error:null},this.lyricsContainer=document.querySelector(".lyrics-column .content-container"),this.translationsContainer=document.querySelector(".translation-column .content-container"),this.initializeEventListeners()}initializeEventListeners(){this.lyricsContainer.addEventListener("change",this.handleLyricsContainerChange.bind(this)),this.translationsContainer.addEventListener("change",this.handleTranslationsContainerChange.bind(this))}handleLyricsContainerChange(e){const t=e.target;t.id&&(t.id.startsWith("songSelect-")||t.id==="songSelect-main")&&this.handleAuthorChange(e)}handleTranslationsContainerChange(e){const t=e.target;t.id&&(t.id.startsWith("languageSelect-")||t.id==="languageSelect-main")&&this.handleLanguageChange(e)}async handleAuthorChange(e){const o=e.target.value;if(!o){this.clearDisplay(),this.updateAllLanguageSelectors(!0);return}this.state.selectedAuthor=o,this.updateAllLanguageSelectors(!1);try{this.setState({isLoading:!0,error:null});const i=await this.lyricsService.getSongsByAuthor(o);if(i.length===0){this.setState({error:"No songs found for this author"});return}this.renderer.renderLyrics(i,this.lyricsContainer),this.updateAllLanguageSelectors(!1,"en"),this.renderer.renderTranslations(i,this.state.selectedLanguage,this.translationsContainer),this.updateAllAuthorSelectors(!1,o),this.notifyContentUpdated(),this.setState({isLoading:!1})}catch(i){console.error("Error in handleAuthorChange:",i),this.setState({isLoading:!1,error:i instanceof Error?i.message:"Unknown error occurred"})}}async handleLanguageChange(e){const o=e.target.value;if(!o||!this.state.selectedAuthor){this.translationsContainer.innerHTML="";return}const i=this.mapLanguageCodeToName(o);this.state.selectedLanguage=i;try{const n=await this.lyricsService.getSongsByAuthor(this.state.selectedAuthor);this.renderer.renderTranslations(n,i,this.translationsContainer),this.updateAllLanguageSelectors(!1,o)}catch(n){this.setState({error:n instanceof Error?n.message:"Error loading translations"})}}clearDisplay(){this.renderer.clearDisplay(this.lyricsContainer,this.translationsContainer)}setState(e){this.state={...this.state,...e},this.updateUI()}updateUI(){this.state.isLoading&&(this.lyricsContainer.innerHTML="<p>Loading...</p>",this.translationsContainer.innerHTML="<p>Loading...</p>"),this.state.error&&(this.lyricsContainer.innerHTML=`<p class="error">Error: ${this.state.error}</p>`,this.translationsContainer.innerHTML=`<p class="error">Error: ${this.state.error}</p>`)}populateAuthorSelect(){this.loadInitialData()}loadInitialData(){this.lyricsService.getAvailableAuthors().length>0&&(this.renderer.renderLyrics([],this.lyricsContainer),this.renderer.renderTranslations([],"english",this.translationsContainer),setTimeout(()=>{this.state.selectedAuthor&&this.updateAllAuthorSelectors(!1,this.state.selectedAuthor);const t=this.getLanguageCode(this.state.selectedLanguage);this.updateAllLanguageSelectors(!1,t)},50))}getLanguageCode(e){switch(e){case"english":return"en";case"español":return"es";default:return"en"}}updateAllLanguageSelectors(e,t){this.translationsContainer.querySelectorAll('select[id^="languageSelect-"]').forEach(i=>{const n=i;n.disabled=e,t&&(n.value=t)})}updateAllAuthorSelectors(e,t){this.lyricsContainer.querySelectorAll('select[id^="songSelect-"]').forEach(i=>{const n=i;n.disabled=e,t&&(n.value=t)})}mapLanguageCodeToName(e){switch(e){case"en":return"english";case"es":return"español";default:return"english"}}getLanguageDisplayName(e){switch(e){case"português":return"Portuguese";case"english":return"English";case"español":return"Spanish";default:return e}}getState(){return{...this.state}}notifyContentUpdated(){const e=new CustomEvent("contentUpdated");window.dispatchEvent(e)}}class C{constructor(){this.lyricsContainer=document.querySelector(".lyrics-column .content-container"),this.translationsContainer=document.querySelector(".translation-column .content-container"),this.lyricsHeading=null,this.translationsHeading=null,this.initializeScrollTracking(),window.addEventListener("contentUpdated",()=>{this.refreshTracking()})}initializeScrollTracking(){const e={root:null,rootMargin:"-60px 0px -80% 0px",threshold:.1},t=new IntersectionObserver(o=>{o.forEach(i=>{if(i.isIntersecting){const n=i.target;let s;n.classList.contains("track-marker")||n.classList.contains("track-nest")?s=n.getAttribute("data-track")||"":s=this.extractTrackName(n.textContent||""),this.updateTrackHeadings(s)}})},e);setTimeout(()=>{this.startObserving(t)},500)}startObserving(e){const t=document.querySelectorAll(".track-heading"),o=document.querySelectorAll(".track-marker"),i=document.querySelectorAll(".track-nest");t.forEach(n=>{e.observe(n)}),o.forEach(n=>{e.observe(n)}),i.forEach(n=>{e.observe(n)}),this.updateHeadingReferences()}updateHeadingReferences(){this.lyricsHeading=document.getElementById("lyrics-track-heading"),this.translationsHeading=document.getElementById("trans-track-heading")}extractTrackName(e){const t=e.match(/Track\s+(\d+)/i);return t?`Track ${t[1]}`:e.trim()||"Track 1"}updateTrackHeadings(e){this.lyricsHeading&&(this.lyricsHeading.textContent=e),this.translationsHeading&&(this.translationsHeading.textContent=e)}refreshTracking(){setTimeout(()=>{this.updateHeadingReferences(),this.initializeScrollTracking()},100)}setTrackHeading(e){this.updateTrackHeadings(e)}}class S{constructor(){this.currentActiveColumn="lyrics",this.debugMode=!1,this.columnsContainer=document.querySelector(".columns-container"),this.lyricsColumn=document.querySelector(".lyrics-column"),this.translationColumn=document.querySelector(".translation-column"),this.debugMode=!0,this.debugMode&&console.log("🔍 MobileScrollDetector: Initializing with elements:",{columnsContainer:this.columnsContainer,lyricsColumn:this.lyricsColumn,translationColumn:this.translationColumn}),this.fixMobileViewport(),this.initializeScrollDetection()}fixMobileViewport(){const e=window.innerWidth<=768;this.debugMode&&console.log("🔍 MobileScrollDetector: Fixing mobile viewport",{isMobile:e,viewport:{width:window.innerWidth,height:window.innerHeight,devicePixelRatio:window.devicePixelRatio}}),e&&setTimeout(()=>{const t=document.querySelectorAll(".sticky-header"),o=document.querySelectorAll(".track-heading");this.debugMode&&console.log("🔍 MobileScrollDetector: Applying mobile fixes to elements:",{stickyHeaders:t.length,trackHeadings:o.length}),t.forEach((n,s)=>{const r=n,l=r.getBoundingClientRect(),c=window.getComputedStyle(r);if(r.style.transform="translateZ(0)",r.style.willChange="transform",r.style.webkitTransform="translate3d(0,0,0)",r.style.webkitBackfaceVisibility="hidden",this.debugMode){const u=r.getBoundingClientRect(),a=window.getComputedStyle(r);console.log(`🔍 Sticky Header ${s+1} transformation:`,{selector:r.className,before:{rect:l,position:c.position,zIndex:c.zIndex,transform:c.transform},after:{rect:u,position:a.position,zIndex:a.zIndex,transform:a.transform}})}}),o.forEach((n,s)=>{const r=n,l=r.getBoundingClientRect(),c=window.getComputedStyle(r);if(r.style.transform="translateZ(0)",r.style.willChange="transform",r.style.webkitTransform="translate3d(0,0,0)",r.style.webkitBackfaceVisibility="hidden",this.debugMode){const u=r.getBoundingClientRect(),a=window.getComputedStyle(r);console.log(`🔍 Track Heading ${s+1} transformation:`,{selector:r.className,before:{rect:l,position:c.position,zIndex:c.zIndex,transform:c.transform},after:{rect:u,position:a.position,zIndex:a.zIndex,transform:a.transform}})}});const i=document.querySelector(".container");if(i){const n=i.getBoundingClientRect(),s=window.getComputedStyle(i);this.debugMode&&console.log("🔍 Container layering analysis:",{rect:n,position:s.position,zIndex:s.zIndex,transform:s.transform,overflow:s.overflow,paddingTop:s.paddingTop})}},100)}initializeScrollDetection(){if(!this.columnsContainer||!this.lyricsColumn||!this.translationColumn){console.warn("Mobile scroll detector: Required elements not found");return}const e=window.innerWidth<=768;this.debugMode&&console.log("🔍 MobileScrollDetector: Initializing scroll detection",{isMobile:e,columnsContainerRect:this.columnsContainer.getBoundingClientRect(),lyricsColumnRect:this.lyricsColumn.getBoundingClientRect(),translationColumnRect:this.translationColumn.getBoundingClientRect()}),e&&(this.setActiveColumn("lyrics"),this.debugMode&&(console.log("🔍 MobileScrollDetector: Ensuring initial sticky header visibility"),setTimeout(()=>{document.querySelectorAll(".sticky-header").forEach((o,i)=>{const n=o,s=n.closest(".lyrics-column, .translation-column");s!=null&&s.classList.contains("lyrics-column")&&(n.style.display="flex",n.style.visibility="visible",n.style.opacity="1",console.log(`🔍 Forced visibility for lyrics sticky header ${i+1}`))})},100)),this.columnsContainer.addEventListener("scroll",()=>{this.handleScroll()}),window.addEventListener("resize",()=>{window.innerWidth<=768!==e&&this.handleResponsiveChange()}))}handleScroll(){const e=this.columnsContainer.getBoundingClientRect(),t=this.lyricsColumn.getBoundingClientRect(),o=this.translationColumn.getBoundingClientRect(),i=this.calculateVisibility(t,e),n=this.calculateVisibility(o,e),s=i>n?"lyrics":"translation";this.debugMode&&console.log("🔍 MobileScrollDetector: Scroll event",{containerRect:e,lyricsRect:t,translationRect:o,lyricsVisibility:i.toFixed(2),translationVisibility:n.toFixed(2),currentActiveColumn:this.currentActiveColumn,newActiveColumn:s,willChange:s!==this.currentActiveColumn}),s!==this.currentActiveColumn&&this.setActiveColumn(s)}calculateVisibility(e,t){const o=e.left-t.left,i=e.right-t.left,n=t.width,s=Math.max(0,o),r=Math.min(n,i);return Math.max(0,r-s)/e.width}setActiveColumn(e){const t=this.currentActiveColumn;if(this.currentActiveColumn=e,this.lyricsColumn.classList.remove("active"),this.translationColumn.classList.remove("active"),e==="lyrics"?this.lyricsColumn.classList.add("active"):this.translationColumn.classList.add("active"),this.debugMode){console.log("🔍 MobileScrollDetector: Active column changed",{from:t,to:e,lyricsClasses:this.lyricsColumn.className,translationClasses:this.translationColumn.className});const o=this.lyricsColumn.querySelector(".sticky-header"),i=this.translationColumn.querySelector(".sticky-header");if(o&&i){const n=window.getComputedStyle(o),s=window.getComputedStyle(i);console.log("🔍 Sticky header visibility after change:",{lyricsHeader:{display:n.display,visibility:n.visibility,opacity:n.opacity,zIndex:n.zIndex,position:n.position},translationHeader:{display:s.display,visibility:s.visibility,opacity:s.opacity,zIndex:s.zIndex,position:s.position}})}}}handleResponsiveChange(){const e=window.innerWidth<=768;this.debugMode&&console.log("🔍 MobileScrollDetector: Responsive change detected",{isMobile:e,newViewport:{width:window.innerWidth,height:window.innerHeight}}),e?this.setActiveColumn("lyrics"):(this.lyricsColumn.classList.remove("active"),this.translationColumn.classList.remove("active"))}getCurrentActiveColumn(){return this.currentActiveColumn}enableDebugMode(){this.debugMode=!0,console.log("🔍 MobileScrollDetector: Debug mode enabled")}disableDebugMode(){this.debugMode=!1,console.log("🔍 MobileScrollDetector: Debug mode disabled")}logCurrentState(){console.log("🔍 MobileScrollDetector: Current state",{currentActiveColumn:this.currentActiveColumn,isMobile:window.innerWidth<=768,viewport:{width:window.innerWidth,height:window.innerHeight},elements:{columnsContainer:this.columnsContainer?{rect:this.columnsContainer.getBoundingClientRect(),scrollLeft:this.columnsContainer.scrollLeft,scrollTop:this.columnsContainer.scrollTop}:null,lyricsColumn:this.lyricsColumn?{rect:this.lyricsColumn.getBoundingClientRect(),classes:this.lyricsColumn.className}:null,translationColumn:this.translationColumn?{rect:this.translationColumn.getBoundingClientRect(),classes:this.translationColumn.className}:null}})}destroy(){var e;(e=this.columnsContainer)==null||e.removeEventListener("scroll",this.handleScroll),window.removeEventListener("resize",this.handleResponsiveChange),this.debugMode&&console.log("🔍 MobileScrollDetector: Destroyed")}}class x{constructor(){this.isEnabled=!1,this.debugOverlay=null,this.logContainer=null,this.isIOS=!1,this.debugInterval=null,this.detectMobilePlatform(),this.setupDebugConsole()}enable(){this.isEnabled=!0,this.createDebugOverlay(),this.startContinuousLogging(),console.log("🔍 Mobile Debug Logger enabled")}disable(){this.isEnabled=!1,this.removeDebugOverlay(),this.stopContinuousLogging(),console.log("🔍 Mobile Debug Logger disabled")}toggle(){this.isEnabled?this.disable():this.enable()}detectMobilePlatform(){const e=navigator.userAgent;this.isIOS=/iPad|iPhone|iPod/.test(e)&&!window.MSStream,console.log("📱 Platform detected:",{isIOS:this.isIOS,userAgent:e,viewport:{width:window.innerWidth,height:window.innerHeight,devicePixelRatio:window.devicePixelRatio}})}setupDebugConsole(){window.debugMobile={enable:()=>this.enable(),disable:()=>this.disable(),toggle:()=>this.toggle(),analyze:()=>this.analyzeLayering(),highlightElement:e=>this.highlightElement(e),logElementInfo:e=>this.logElementInfo(e),testSticky:()=>this.testStickyBehavior(),fixLayering:()=>this.attemptLayerFix(),enableVisualDebug:()=>this.enableVisualDebugMode(),disableVisualDebug:()=>this.disableVisualDebugMode(),logScrollState:()=>this.logScrollState(),fixContainerLayering:()=>this.fixContainerLayering(),fixStickyHeaderVisibility:()=>this.fixStickyHeaderVisibility(),testDataLoading:()=>this.testDataLoading(),testAuthorSelection:()=>this.testAuthorSelection()},console.log("🔧 Debug functions available:",Object.keys(window.debugMobile)),console.log("💡 Usage: debugMobile.enable() or debugMobile.analyze()"),console.log("🎨 Visual debugging: debugMobile.enableVisualDebug()")}analyzeLayering(){const e=[".container",".sticky-header",".track-heading",".columns-container",".lyrics-column",".translation-column",".content-container",".song-selector",".language-selector"],t=[],o=[],i=[];e.forEach(s=>{const r=document.querySelector(s);if(r){const l=this.getElementInfo(s,r);t.push(l)}}),this.findLayerConflicts(t,o),this.generateRecommendations(t,i);const n={timestamp:Date.now(),viewport:{width:window.innerWidth,height:window.innerHeight,devicePixelRatio:window.devicePixelRatio,userAgent:navigator.userAgent},elements:t,layerConflicts:o,recommendations:i};return console.log("🔍 Layer Analysis:",n),this.updateDebugOverlay(n),n}getElementInfo(e,t){const o=t.getBoundingClientRect(),i=window.getComputedStyle(t);return{selector:e,element:t,boundingRect:o,computedStyle:i,zIndex:i.zIndex,position:i.position,transform:i.transform,visibility:i.visibility,display:i.display,opacity:i.opacity,overflow:i.overflow,backgroundColor:i.backgroundColor,width:i.width,height:i.height,top:i.top,left:i.left,right:i.right,bottom:i.bottom}}findLayerConflicts(e,t){const o=e.filter(n=>n.zIndex!=="auto"&&n.zIndex!=="0");if(o.length>1){const n=o.sort((s,r)=>parseInt(s.zIndex)-parseInt(r.zIndex));t.push(`Z-index layers: ${n.map(s=>`${s.selector}(${s.zIndex})`).join(" < ")}`)}const i=e.filter(n=>n.position==="fixed");e.filter(n=>n.position==="sticky"||n.position==="-webkit-sticky"),i.length>1&&t.push(`Multiple fixed elements: ${i.map(n=>n.selector).join(", ")}`),e.forEach((n,s)=>{e.slice(s+1).forEach(r=>{this.elementsOverlap(n.boundingRect,r.boundingRect)&&t.push(`Overlapping: ${n.selector} and ${r.selector}`)})})}elementsOverlap(e,t){return!(e.right<t.left||t.right<e.left||e.bottom<t.top||t.bottom<e.top)}generateRecommendations(e,t){this.isIOS&&e.filter(n=>n.position==="sticky"||n.position==="-webkit-sticky").length>0&&(t.push("iOS Safari: Use -webkit-transform: translate3d(0,0,0) for sticky elements"),t.push("iOS Safari: Add -webkit-backface-visibility: hidden")),e.forEach(i=>{(i.position==="fixed"||i.position==="sticky")&&!i.transform.includes("translate3d")&&t.push(`Add hardware acceleration to ${i.selector}`)});const o=e.map(i=>parseInt(i.zIndex)).filter(i=>!isNaN(i)).sort((i,n)=>i-n);if(o.length>1){for(let i=1;i<o.length;i++)if(o[i]-o[i-1]>100){t.push("Consider reducing z-index gaps for better layer management");break}}}highlightElement(e){const t=document.querySelector(e);if(!t){console.warn(`Element not found: ${e}`);return}const o=document.createElement("div");o.style.cssText=`
      position: fixed;
      top: ${t.offsetTop}px;
      left: ${t.offsetLeft}px;
      width: ${t.offsetWidth}px;
      height: ${t.offsetHeight}px;
      background: rgba(255, 0, 0, 0.3);
      border: 2px solid red;
      z-index: 9999;
      pointer-events: none;
      animation: debugPulse 1s infinite;
    `,document.body.appendChild(o);const i=document.createElement("style");i.textContent=`
      @keyframes debugPulse {
        0%, 100% { opacity: 0.3; }
        50% { opacity: 0.7; }
      }
    `,document.head.appendChild(i),setTimeout(()=>{o.remove(),i.remove()},3e3),console.log(`🎯 Highlighted: ${e}`,this.getElementInfo(e,t))}logElementInfo(e){const t=document.querySelector(e);if(!t){console.warn(`Element not found: ${e}`);return}const o=this.getElementInfo(e,t);console.log(`📊 Element Info: ${e}`,o)}testStickyBehavior(){console.log("🧪 Testing sticky behavior..."),document.querySelectorAll(".sticky-header, .track-heading").forEach((t,o)=>{const i=t,n=i.getBoundingClientRect(),s=window.getComputedStyle(i);console.log(`Sticky Element ${o+1}:`,{selector:i.className,position:s.position,top:s.top,zIndex:s.zIndex,transform:s.transform,boundingRect:n,isSticky:s.position.includes("sticky"),isFixed:s.position==="fixed"})})}attemptLayerFix(){console.log("🔧 Attempting layer fix..."),document.querySelectorAll(".sticky-header").forEach(o=>{const i=o;i.style.webkitTransform="translate3d(0,0,0)",i.style.transform="translate3d(0,0,0)",i.style.webkitBackfaceVisibility="hidden",i.style.backfaceVisibility="hidden",i.style.willChange="transform",i.style.zIndex="9999"});const t=document.querySelector(".container");t&&(t.style.webkitTransform="none",t.style.transform="none",t.style.zIndex="auto",t.style.position="static"),console.log("✅ Layer fix applied"),setTimeout(()=>this.analyzeLayering(),100)}fixContainerLayering(){console.log("🔧 Fixing container layering specifically...");const e=document.querySelector(".container"),t=document.querySelectorAll(".sticky-header");if(e){const o=window.getComputedStyle(e);console.log("Container before fix:",{position:o.position,zIndex:o.zIndex,transform:o.transform}),e.style.position="static",e.style.zIndex="auto",e.style.webkitTransform="none",e.style.transform="none";const i=window.getComputedStyle(e);console.log("Container after fix:",{position:i.position,zIndex:i.zIndex,transform:i.transform})}t.forEach((o,i)=>{const n=o,s=window.getComputedStyle(n);n.style.zIndex="9999",n.style.position="fixed";const r=window.getComputedStyle(n);console.log(`Sticky header ${i+1} fix:`,{before:{zIndex:s.zIndex,position:s.position},after:{zIndex:r.zIndex,position:r.position}})}),console.log("✅ Container layering fix applied"),setTimeout(()=>this.analyzeLayering(),100)}enableVisualDebugMode(){document.body.classList.add("debug-mode"),console.log("🎨 Visual debug mode enabled - elements now have colored borders")}disableVisualDebugMode(){document.body.classList.remove("debug-mode"),console.log("🎨 Visual debug mode disabled")}logScrollState(){const e=document.querySelector(".columns-container"),t=document.querySelector(".lyrics-column"),o=document.querySelector(".translation-column");if(!e||!t||!o){console.warn("Required elements not found for scroll state logging");return}const i=e.getBoundingClientRect(),n=t.getBoundingClientRect(),s=o.getBoundingClientRect();console.log("📊 Current scroll state:",{viewport:{width:window.innerWidth,height:window.innerHeight,scrollX:window.scrollX,scrollY:window.scrollY},columnsContainer:{rect:i,scrollLeft:e.scrollLeft,scrollTop:e.scrollTop,scrollWidth:e.scrollWidth,scrollHeight:e.scrollHeight},lyricsColumn:{rect:n,classes:t.className,isActive:t.classList.contains("active")},translationColumn:{rect:s,classes:o.className,isActive:o.classList.contains("active")},stickyHeaders:Array.from(document.querySelectorAll(".sticky-header")).map((r,l)=>{const c=r,u=c.getBoundingClientRect(),a=window.getComputedStyle(c);return{index:l,rect:u,display:a.display,visibility:a.visibility,position:a.position,zIndex:a.zIndex,transform:a.transform}})})}fixStickyHeaderVisibility(){console.log("🔧 Fixing sticky header visibility...");const e=document.querySelectorAll(".sticky-header"),t=document.querySelector(".lyrics-column"),o=document.querySelector(".translation-column");console.log("Found sticky headers:",e.length),console.log("Lyrics column classes:",t==null?void 0:t.className),console.log("Translation column classes:",o==null?void 0:o.className),e.forEach((i,n)=>{const s=i,r=window.getComputedStyle(s),l=s.closest(".lyrics-column, .translation-column");console.log(`Sticky header ${n+1} before fix:`,{element:s.outerHTML,parentColumn:l==null?void 0:l.className,display:r.display,visibility:r.visibility,position:r.position,zIndex:r.zIndex,opacity:r.opacity,rect:s.getBoundingClientRect()}),window.innerWidth<=768&&(s.style.display="flex",s.style.visibility="visible",s.style.opacity="1",s.style.position="fixed",s.style.top="0",s.style.zIndex="9999",l!=null&&l.classList.contains("lyrics-column")&&(s.style.display="flex"));const c=window.getComputedStyle(s);console.log(`Sticky header ${n+1} after fix:`,{display:c.display,visibility:c.visibility,position:c.position,zIndex:c.zIndex,opacity:c.opacity,rect:s.getBoundingClientRect()})}),t&&!t.classList.contains("active")&&(t.classList.add("active"),console.log("✅ Set lyrics column as active")),console.log("✅ Sticky header visibility fix applied")}testDataLoading(){console.log("🧪 Testing data loading..."),fetch("/authors-index.json").then(e=>e.json()).then(e=>{if(console.log("📊 Authors index loaded:",e),e.authors&&e.authors.length>0){const t=e.authors[0];return console.log("📊 Testing loading for author:",t),fetch(`/authors/${t.file}`)}}).then(e=>{if(e)return e.json();throw new Error("No response received")}).then(e=>{var t,o;console.log("📊 Author data loaded:",{songsCount:((t=e.songs)==null?void 0:t.length)||0,firstSong:((o=e.songs)==null?void 0:o[0])||null,authors:e.songs?[...new Set(e.songs.map(i=>i.author))]:[]})}).catch(e=>{console.error("❌ Error testing data loading:",e)})}testAuthorSelection(){console.log("🧪 Testing author selection...");const e=document.querySelector("#songSelect-default, #songSelect-main");if(!e){console.error("❌ No author selector found");return}console.log("🔍 Found author selector:",e),console.log("🔍 Available options:",Array.from(e.options).map(o=>o.value));const t=Array.from(e.options).filter(o=>o.value&&o.value!=="");if(t.length>0){const o=t[0].value;console.log("🔍 Selecting first author:",o),e.value=o,e.dispatchEvent(new Event("change",{bubbles:!0})),console.log("🔍 Change event dispatched")}else console.error("❌ No available authors found in selector")}createDebugOverlay(){if(this.debugOverlay)return;this.debugOverlay=document.createElement("div"),this.debugOverlay.style.cssText=`
      position: fixed;
      top: 10px;
      right: 10px;
      width: 300px;
      max-height: 400px;
      background: rgba(0, 0, 0, 0.9);
      color: white;
      font-family: monospace;
      font-size: 12px;
      padding: 10px;
      border-radius: 5px;
      z-index: 10000;
      overflow-y: auto;
      -webkit-overflow-scrolling: touch;
    `,this.logContainer=document.createElement("div"),this.debugOverlay.appendChild(this.logContainer);const e=document.createElement("div");e.style.cssText="margin-bottom: 10px; text-align: center;";const t=document.createElement("button");t.textContent="Analyze",t.onclick=()=>this.analyzeLayering(),t.style.cssText="margin: 0 5px; padding: 5px 10px; background: #007bff; color: white; border: none; border-radius: 3px;";const o=document.createElement("button");o.textContent="Fix",o.onclick=()=>this.attemptLayerFix(),o.style.cssText="margin: 0 5px; padding: 5px 10px; background: #28a745; color: white; border: none; border-radius: 3px;";const i=document.createElement("button");i.textContent="Close",i.onclick=()=>this.disable(),i.style.cssText="margin: 0 5px; padding: 5px 10px; background: #dc3545; color: white; border: none; border-radius: 3px;",e.appendChild(t),e.appendChild(o),e.appendChild(i),this.debugOverlay.insertBefore(e,this.logContainer),document.body.appendChild(this.debugOverlay)}updateDebugOverlay(e){if(!this.logContainer)return;const t=`
      <div style="border-bottom: 1px solid #666; padding-bottom: 10px; margin-bottom: 10px;">
        <strong>📱 ${e.viewport.width}x${e.viewport.height} (${e.viewport.devicePixelRatio}x)</strong>
      </div>
      
      <div style="margin-bottom: 10px;">
        <strong>⚠️ Conflicts (${e.layerConflicts.length}):</strong>
        ${e.layerConflicts.map(o=>`<div style="color: #ff6b6b;">• ${o}</div>`).join("")}
      </div>
      
      <div style="margin-bottom: 10px;">
        <strong>💡 Recommendations (${e.recommendations.length}):</strong>
        ${e.recommendations.map(o=>`<div style="color: #51cf66;">• ${o}</div>`).join("")}
      </div>
      
      <div>
        <strong>🔍 Elements:</strong>
        ${e.elements.map(o=>`
          <div style="margin: 5px 0; padding: 5px; background: rgba(255,255,255,0.1); border-radius: 3px;">
            <strong>${o.selector}</strong><br>
            z-index: ${o.zIndex}, position: ${o.position}<br>
            ${o.boundingRect.width.toFixed(0)}x${o.boundingRect.height.toFixed(0)} at (${o.boundingRect.left.toFixed(0)}, ${o.boundingRect.top.toFixed(0)})
          </div>
        `).join("")}
      </div>
    `;this.logContainer.innerHTML=t}removeDebugOverlay(){this.debugOverlay&&(this.debugOverlay.remove(),this.debugOverlay=null,this.logContainer=null)}startContinuousLogging(){this.debugInterval||(this.debugInterval=window.setInterval(()=>{this.isEnabled&&this.analyzeLayering()},2e3))}stopContinuousLogging(){this.debugInterval&&(clearInterval(this.debugInterval),this.debugInterval=null)}destroy(){this.disable(),delete window.debugMobile}}function k(){const d=new f,e=["Normal line|","^Chorus line|","Another normal line|","^Another chorus line|"];console.log("Testing lyrics formatting:"),console.log("Input:",e),console.log("Output:",d.formatLyrics(e))}class L{constructor(){this.scrollTracker=null,this.mobileScrollDetector=null,this.mobileDebugLogger=null,this.lyricsService=new f,this.renderer=new v(this.lyricsService),this.uiManager=new w(this.lyricsService,this.renderer)}async initialize(){try{console.log("Initializing Lyrics App..."),k(),this.mobileDebugLogger=new x,console.log("Mobile debug logger initialized"),await this.lyricsService.loadData(),console.log("Lyrics data loaded successfully"),this.uiManager.populateAuthorSelect(),console.log("UI initialized successfully"),this.scrollTracker=new C,console.log("Scroll tracker initialized"),this.mobileScrollDetector=new S,console.log("Mobile scroll detector initialized"),window.lyricsApp=this,console.log("🔧 Global app reference available as window.lyricsApp"),this.mobileDebugLogger&&setTimeout(()=>{console.log("🔍 Running initial layer analysis..."),this.mobileDebugLogger.analyzeLayering()},1e3)}catch(e){console.error("Failed to initialize app:",e),this.showError("Failed to load lyrics data. Please refresh the page.")}}showError(e){const t=document.querySelector(".lyrics-column .content-container"),o=document.querySelector(".translation-column .content-container");t&&(t.innerHTML=`<p class="error">${e}</p>`),o&&(o.innerHTML=`<p class="error">${e}</p>`)}getDebugLogger(){return this.mobileDebugLogger}getMobileScrollDetector(){return this.mobileScrollDetector}enableDebugMode(){this.mobileDebugLogger&&(this.mobileDebugLogger.enable(),console.log("🔍 Debug mode enabled - check top-right corner for overlay"))}disableDebugMode(){this.mobileDebugLogger&&this.mobileDebugLogger.disable()}}document.addEventListener("DOMContentLoaded",async()=>{await new L().initialize()});
