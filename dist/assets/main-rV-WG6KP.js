(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))s(r);new MutationObserver(r=>{for(const i of r)if(i.type==="childList")for(const n of i.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function e(r){const i={};return r.integrity&&(i.integrity=r.integrity),r.referrerPolicy&&(i.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?i.credentials="include":r.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(r){if(r.ep)return;r.ep=!0;const i=e(r);fetch(r.href,i)}})();class m{constructor(){this.authorsIndex=null,this.authorData=new Map,this.authors=new Map,this.songTypes=new Set}async loadAuthorsIndex(){try{const t=`?cb=${new Date().getTime()}`,e=await fetch(`/authors-index.json${t}`);if(!e.ok)throw new Error(`Failed to load authors index: ${e.statusText}`);const s=await e.json();return this.authorsIndex=s,s}catch(t){throw console.error("Error loading authors index:",t),t}}async loadAuthorData(t){if(this.authorData.has(t))return this.authorData.get(t);this.authorsIndex||await this.loadAuthorsIndex();const e=this.authorsIndex.authors.find(s=>s.id===t);if(!e)throw new Error(`Author ${t} not found in index`);try{const s=`?cb=${new Date().getTime()}`,r=await fetch(`/authors/${e.file}${s}`);if(!r.ok)throw new Error(`Failed to load data for author ${t}: ${r.statusText}`);const i=await r.json();return this.authorData.set(t,i),this.processAuthorData(t,i),i}catch(s){throw console.error(`Error loading data for author ${t}:`,s),s}}async loadData(){await this.loadAuthorsIndex();const t=[];for(const e of this.authorsIndex.authors)try{const s=await this.loadAuthorData(e.id);t.push(...s.songs)}catch(s){console.warn(`Failed to load data for author ${e.id}:`,s)}return{songs:t}}processAuthorData(t,e){e&&(e.songs.forEach(s=>{this.songTypes.add(s.type),this.authors.has(s.author)||this.authors.set(s.author,{id:s.author.toLowerCase().replace(/\s+/g,"-"),name:s.author,albums:[]})}),this.groupSongsByStructure(e))}groupSongsByStructure(t){if(!t)return;const e=new Map;t.songs.forEach(s=>{e.has(s.author)||e.set(s.author,new Map);const r=e.get(s.author);r.has(s.album)||r.set(s.album,new Map);const i=r.get(s.album);i.has(s.track)||i.set(s.track,[]),i.get(s.track).push(s)}),e.forEach((s,r)=>{let i=this.authors.get(r);i||(i={id:r.toLowerCase().replace(/\s+/g,"-"),name:r,albums:[]},this.authors.set(r,i));const n=[];s.forEach((u,a)=>{const c=[];u.forEach((h,o)=>{c.push({id:o.toLowerCase().replace(/\s+/g,"-"),name:o,songs:h})}),n.push({id:a.toLowerCase().replace(/\s+/g,"-"),name:a,tracks:c})}),i.albums=n})}getAvailableAuthors(){var t;return((t=this.authorsIndex)==null?void 0:t.authors)||[]}getAuthors(){return Array.from(this.authors.values())}getAuthorById(t){return Array.from(this.authors.values()).find(e=>e.id===t)}async getSongsByAuthor(t){var r;const e=(r=this.authorsIndex)==null?void 0:r.authors.find(i=>i.name===t);return e?(await this.loadAuthorData(e.id)).songs.filter(i=>i.author===t):[]}getSongTypes(){return Array.from(this.songTypes).sort()}async getSongsByType(t){const e=[];for(const[s,r]of this.authorData.entries())e.push(...r.songs.filter(i=>i.type===t));return e}getSupportedLanguages(){return["english","español"]}formatLyrics(t){return t.map((e,s)=>{let r=e;return r.startsWith("^")?(r=r.substring(1),r=r.replace(/\|$/,""),r=`<b>${r}</b><br>`):(r=r.replace(/\*(.*?)\*/g,"<b>$1</b>"),r=r.replace(/\|/g,"<br>")),r}).join("")}getLanguageKey(t){switch(t){case"english":return"english";case"español":return"español";default:return"português"}}}function v(l,t){try{if(t==="português")return Array.isArray(l.lyrics.português)&&l.lyrics.português.length>0;{const e=t;return Array.isArray(l.lyrics.translations[e])&&l.lyrics.translations[e].length>0}}catch(e){return console.error(`Validation failed for song ${l.title.português} in language ${t}:`,e),!1}}class S{constructor(t){this.lyricsService=t}renderLyrics(t,e){if(!t||t.length===0){const c=this.lyricsService.getAvailableAuthors().map(h=>`<option value="${h.name}">${h.name}</option>`).join("");e.innerHTML=`
        <div class="sticky-header" data-track="Default">
          <div class="song-selector">
            <select id="songSelect-default">
              <option value="" disabled selected>Choose an Author...</option>
              ${c}
            </select>
          </div>
        </div>
        <h2 id="lyrics-track-heading" class="track-heading">Select an Author</h2>
        <p>No lyrics available.</p>
      `;return}const s=this.groupSongsByTrack(t);let r="";const n=this.lyricsService.getAvailableAuthors().map(a=>`<option value="${a.name}">${a.name}</option>`).join("");r+=`
      <div class="sticky-header">
        <div class="song-selector">
          <select id="songSelect-main">
            <option value="" disabled selected>Choose an Author...</option>
            ${n}
          </select>
        </div>
      </div>
      <h2 id="lyrics-track-heading" class="track-heading">Track 1</h2>
    `,Object.keys(s).sort().forEach((a,c)=>{const h=a.replace(/\s+/g,"-");r+=`
        <div class="track-nest" data-track="${a}" id="lyrics-nest-${h}">
          <!-- Track ${c+1} Content -->
        </div>
      `,s[a].forEach((o,y)=>{const d=`lyrics-song-${y}-${h}`;r+=`
          <div class="song-section" id="${d}">
            <i class="song-type">${o.type}</i><br><br>
            <b>${o.title.português}</b><br><br>
            ${this.lyricsService.formatLyrics(o.lyrics.português)}
          </div>
          <hr>
        `})}),e.innerHTML=r}renderTranslations(t,e,s){if(!t||t.length===0){this.lyricsService.getAvailableAuthors().map(c=>`<option value="${c.name}">${c.name}</option>`).join(""),s.innerHTML=`
        <div class="sticky-header" data-track="Default">
          <div class="language-selector">
            <select id="languageSelect-default" disabled>
              <option value="" disabled selected>Choose language...</option>
              <option value="en">English</option>
              <option value="es">Spanish</option>
            </select>
          </div>
        </div>
        <h2 id="trans-track-heading" class="track-heading">Select a Language</h2>
        <p>No translations available.</p>
      `;return}const r=this.groupSongsByTrack(t);let i="";this.lyricsService.getAvailableAuthors().map(a=>`<option value="${a.name}">${a.name}</option>`).join(""),i+=`
      <div class="sticky-header">
        <div class="language-selector">
          <select id="languageSelect-main">
            <option value="" disabled selected>Choose language...</option>
            <option value="en">English</option>
            <option value="es">Spanish</option>
          </select>
        </div>
      </div>
      <h2 id="trans-track-heading" class="track-heading">Track 1</h2>
    `,Object.keys(r).sort().forEach((a,c)=>{const h=a.replace(/\s+/g,"-");i+=`
        <div class="track-nest" data-track="${a}" id="trans-nest-${h}">
          <!-- Track ${c+1} Content -->
        </div>
      `,r[a].forEach((o,y)=>{const d=`trans-song-${y}-${h}`;if(!v(o,e)){i+=`
            <div class="translation-section" id="${d}">
              <i class="song-type">${o.type}</i><br>
              <b>${o.title.português}</b><br>
              <p class="error">Translation not available for ${e}</p>
            </div>
            <hr>
          `;return}let g,p;try{if(e==="português")g=o.lyrics.português,p=o.title.português;else{const f=e;g=o.lyrics.translations[f],p=o.title[e]}}catch(f){console.error(`Error processing song ${o.title.português} for language ${e}:`,f),g=["Translation not available"],p=o.title.português}i+=`
          <div class="translation-section" id="${d}">
            <i class="song-type">${o.type}</i><br><br>
            <b>${p}</b><br><br>
            ${this.lyricsService.formatLyrics(g)}
          </div>
          <hr>
        `})}),s.innerHTML=i}groupSongsByTrack(t){const e={};return t.forEach(s=>{e[s.track]||(e[s.track]=[]),e[s.track].push(s)}),e}clearDisplay(t,e){t.innerHTML="",e.innerHTML=""}}class A{constructor(t,e){this.lyricsService=t,this.renderer=e,this.state={selectedAuthor:null,selectedLanguage:"english",isLoading:!1,error:null},this.lyricsContainer=document.querySelector(".lyrics-column .content-container"),this.translationsContainer=document.querySelector(".translation-column .content-container"),this.initializeEventListeners()}initializeEventListeners(){this.lyricsContainer.addEventListener("change",this.handleLyricsContainerChange.bind(this)),this.translationsContainer.addEventListener("change",this.handleTranslationsContainerChange.bind(this))}handleLyricsContainerChange(t){const e=t.target;e.id&&(e.id.startsWith("songSelect-")||e.id==="songSelect-main")&&this.handleAuthorChange(t)}handleTranslationsContainerChange(t){const e=t.target;e.id&&(e.id.startsWith("languageSelect-")||e.id==="languageSelect-main")&&this.handleLanguageChange(t)}async handleAuthorChange(t){const s=t.target.value;if(!s){this.clearDisplay(),this.updateAllLanguageSelectors(!0);return}this.state.selectedAuthor=s,this.updateAllLanguageSelectors(!1);try{this.setState({isLoading:!0,error:null});const r=await this.lyricsService.getSongsByAuthor(s);if(r.length===0){this.setState({error:"No songs found for this author"});return}this.renderer.renderLyrics(r,this.lyricsContainer),this.updateAllLanguageSelectors(!1,"en"),this.renderer.renderTranslations(r,this.state.selectedLanguage,this.translationsContainer),this.updateAllAuthorSelectors(!1,s),this.notifyContentUpdated(),this.setState({isLoading:!1})}catch(r){console.error("Error in handleAuthorChange:",r),this.setState({isLoading:!1,error:r instanceof Error?r.message:"Unknown error occurred"})}}async handleLanguageChange(t){const s=t.target.value;if(!s||!this.state.selectedAuthor){this.translationsContainer.innerHTML="";return}const r=this.mapLanguageCodeToName(s);this.state.selectedLanguage=r;try{const i=await this.lyricsService.getSongsByAuthor(this.state.selectedAuthor);this.renderer.renderTranslations(i,r,this.translationsContainer),this.updateAllLanguageSelectors(!1,s)}catch(i){this.setState({error:i instanceof Error?i.message:"Error loading translations"})}}clearDisplay(){this.renderer.clearDisplay(this.lyricsContainer,this.translationsContainer)}setState(t){this.state={...this.state,...t},this.updateUI()}updateUI(){this.state.isLoading&&(this.lyricsContainer.innerHTML="<p>Loading...</p>",this.translationsContainer.innerHTML="<p>Loading...</p>"),this.state.error&&(this.lyricsContainer.innerHTML=`<p class="error">Error: ${this.state.error}</p>`,this.translationsContainer.innerHTML=`<p class="error">Error: ${this.state.error}</p>`)}populateAuthorSelect(){this.loadInitialData()}loadInitialData(){this.lyricsService.getAvailableAuthors().length>0&&(this.renderer.renderLyrics([],this.lyricsContainer),this.renderer.renderTranslations([],"english",this.translationsContainer),setTimeout(()=>{this.state.selectedAuthor&&this.updateAllAuthorSelectors(!1,this.state.selectedAuthor);const e=this.getLanguageCode(this.state.selectedLanguage);this.updateAllLanguageSelectors(!1,e)},50))}getLanguageCode(t){switch(t){case"english":return"en";case"español":return"es";default:return"en"}}updateAllLanguageSelectors(t,e){this.translationsContainer.querySelectorAll('select[id^="languageSelect-"]').forEach(r=>{const i=r;i.disabled=t,e&&(i.value=e)})}updateAllAuthorSelectors(t,e){this.lyricsContainer.querySelectorAll('select[id^="songSelect-"]').forEach(r=>{const i=r;i.disabled=t,e&&(i.value=e)})}mapLanguageCodeToName(t){switch(t){case"en":return"english";case"es":return"español";default:return"english"}}getLanguageDisplayName(t){switch(t){case"português":return"Portuguese";case"english":return"English";case"español":return"Spanish";default:return t}}getState(){return{...this.state}}notifyContentUpdated(){const t=new CustomEvent("contentUpdated");window.dispatchEvent(t)}}class b{constructor(){this.lyricsContainer=document.querySelector(".lyrics-column .content-container"),this.translationsContainer=document.querySelector(".translation-column .content-container"),this.lyricsHeading=null,this.translationsHeading=null,this.initializeScrollTracking(),window.addEventListener("contentUpdated",()=>{this.refreshTracking()})}initializeScrollTracking(){const t={root:null,rootMargin:"-60px 0px -80% 0px",threshold:.1},e=new IntersectionObserver(s=>{s.forEach(r=>{if(r.isIntersecting){const i=r.target;let n;i.classList.contains("track-marker")||i.classList.contains("track-nest")?n=i.getAttribute("data-track")||"":n=this.extractTrackName(i.textContent||""),this.updateTrackHeadings(n)}})},t);setTimeout(()=>{this.startObserving(e)},500)}startObserving(t){const e=document.querySelectorAll(".track-heading"),s=document.querySelectorAll(".track-marker"),r=document.querySelectorAll(".track-nest");e.forEach(i=>{t.observe(i)}),s.forEach(i=>{t.observe(i)}),r.forEach(i=>{t.observe(i)}),this.updateHeadingReferences()}updateHeadingReferences(){this.lyricsHeading=document.getElementById("lyrics-track-heading"),this.translationsHeading=document.getElementById("trans-track-heading")}extractTrackName(t){const e=t.match(/Track\s+(\d+)/i);return e?`Track ${e[1]}`:t.trim()||"Track 1"}updateTrackHeadings(t){this.lyricsHeading&&(this.lyricsHeading.textContent=t),this.translationsHeading&&(this.translationsHeading.textContent=t)}refreshTracking(){setTimeout(()=>{this.updateHeadingReferences(),this.initializeScrollTracking()},100)}setTrackHeading(t){this.updateTrackHeadings(t)}}class C{constructor(){this.currentActiveColumn="lyrics",this.columnsContainer=document.querySelector(".columns-container"),this.lyricsColumn=document.querySelector(".lyrics-column"),this.translationColumn=document.querySelector(".translation-column"),this.fixMobileViewport(),this.initializeScrollDetection()}fixMobileViewport(){window.innerWidth<=768&&setTimeout(()=>{document.querySelectorAll(".sticky-header").forEach(r=>{const i=r;i.style.transform="translateZ(0)",i.style.willChange="transform"}),document.querySelectorAll(".track-heading").forEach(r=>{const i=r;i.style.transform="translateZ(0)",i.style.willChange="transform"})},100)}initializeScrollDetection(){if(!this.columnsContainer||!this.lyricsColumn||!this.translationColumn){console.warn("Mobile scroll detector: Required elements not found");return}const t=window.innerWidth<=768;t&&(this.setActiveColumn("lyrics"),this.columnsContainer.addEventListener("scroll",()=>{this.handleScroll()}),window.addEventListener("resize",()=>{window.innerWidth<=768!==t&&this.handleResponsiveChange()}))}handleScroll(){const t=this.columnsContainer.getBoundingClientRect(),e=this.lyricsColumn.getBoundingClientRect(),s=this.translationColumn.getBoundingClientRect(),r=this.calculateVisibility(e,t),i=this.calculateVisibility(s,t),n=r>i?"lyrics":"translation";n!==this.currentActiveColumn&&this.setActiveColumn(n)}calculateVisibility(t,e){const s=t.left-e.left,r=t.right-e.left,i=e.width,n=Math.max(0,s),u=Math.min(i,r);return Math.max(0,u-n)/t.width}setActiveColumn(t){this.currentActiveColumn=t,this.lyricsColumn.classList.remove("active"),this.translationColumn.classList.remove("active"),t==="lyrics"?this.lyricsColumn.classList.add("active"):this.translationColumn.classList.add("active")}handleResponsiveChange(){window.innerWidth<=768?this.setActiveColumn("lyrics"):(this.lyricsColumn.classList.remove("active"),this.translationColumn.classList.remove("active"))}getCurrentActiveColumn(){return this.currentActiveColumn}destroy(){var t;(t=this.columnsContainer)==null||t.removeEventListener("scroll",this.handleScroll),window.removeEventListener("resize",this.handleResponsiveChange)}}function L(){const l=new m,t=["Normal line|","^Chorus line|","Another normal line|","^Another chorus line|"];console.log("Testing lyrics formatting:"),console.log("Input:",t),console.log("Output:",l.formatLyrics(t))}class w{constructor(){this.scrollTracker=null,this.mobileScrollDetector=null,this.lyricsService=new m,this.renderer=new S(this.lyricsService),this.uiManager=new A(this.lyricsService,this.renderer)}async initialize(){try{console.log("Initializing Lyrics App..."),L(),await this.lyricsService.loadAuthorsIndex(),console.log("Authors index loaded successfully"),this.uiManager.populateAuthorSelect(),console.log("UI initialized successfully"),this.scrollTracker=new b,console.log("Scroll tracker initialized"),this.mobileScrollDetector=new C,console.log("Mobile scroll detector initialized")}catch(t){console.error("Failed to initialize app:",t),this.showError("Failed to load lyrics data. Please refresh the page.")}}showError(t){const e=document.querySelector(".lyrics-column .content-container"),s=document.querySelector(".translation-column .content-container");e&&(e.innerHTML=`<p class="error">${t}</p>`),s&&(s.innerHTML=`<p class="error">${t}</p>`)}}document.addEventListener("DOMContentLoaded",async()=>{await new w().initialize()});
